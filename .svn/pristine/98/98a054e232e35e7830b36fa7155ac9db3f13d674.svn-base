<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>


<div class="card mb-2">
	<div class="card-body">
		<h5 class="card-title">내정보</h5>
		<sec:authorize access="isAuthenticated()">
			<sec:authentication property="principal.userVO.userId" var="loginId" />
			<sec:authentication property="principal.userVO.userNm" var="loginName" />
		</sec:authorize>

		<ul class="nav nav-tabs" id="myTab" role="tablist">
			<li class="nav-item"><a class="nav-link active" id="my-tab" data-bs-toggle="tab" href="#tab-my" role="tab" aria-controls="tab-my" aria-selected="true">내정보</a></li>
			<li class="nav-item"><a class="nav-link" id="ai-tab" data-bs-toggle="tab" href="#tab-ai" role="tab" aria-controls="tab-ai" aria-selected="false">AI기능</a></li>
		</ul>
		<div class="tab-content border border-top-0 p-3" id="myTabContent">
			<!-- 내정보 div -->
			<div class="tab-pane fade show active" id="tab-my" role="tabpanel" aria-labelledby="my-tab">
				나는 내정보가 나올 곳!!
			</div>
			<!-- 내정보 div 끝 -->
			<!-- ai div -->
			<div class="tab-pane fade" id="tab-ai" role="tabpanel" aria-labelledby="ai-tab">
	<!--    			<p>AI 기능을 이용하기 위하여 얼굴/음성을 등록해 주세요</p> -->
				<ul class="nav nav-tabs" id="myTab" role="tablist">
					<li class="nav-item"><a class="nav-link active" id="my-face" data-bs-toggle="tab" href="#tab-face" role="tab" aria-controls="tab-face" aria-selected="true">얼굴인식 등록</a></li>
					<li class="nav-item"><a class="nav-link" id="voice-tab" data-bs-toggle="tab" href="#tab-voice" role="tab" aria-controls="tab-voice" aria-selected="false">음성인식 등록</a></li>
				</ul>
				
				<!-- 얼굴인식 div -->
				<div class="tab-pane fade show active" id="tab-face" role="tabpanel" aria-labelledby="my-face">
					나는 얼굴인식!
					<button>얼굴인식할꾸야</button>
					
					
					
				</div>
				<!-- 얼굴인식 div 끝 -->
	
				<!-- 음성인식 div -->
				<div class="tab-pane fade" id="tab-voice" role="tabpanel" aria-labelledby="voice-tab">
					나는 음성인식!!
					<div>
						<button>음성인식할구야</button>
						<button id="record">녹음</button>
						<button id="stop">정지</button>
						<div id="sound-clips"></div>
					</div>
				</div>
				<!-- 음성인식 div 끝 -->
			</div>
			<!-- ai div 끝 -->
		</div>
	</div>
</div>
	
<script src= "voiceRecord.js"></script>
<script type="text/javascript">       


$(document).ready(function(){
    const record = document.getElementById('record');
    const stop = document.getElementById('stop');
    const soundClips = document.getElementById('sound-clips');

    if(navigator.mediaDevices){
        var constraints = {
                audio:true
        }

        let chunks = []; // 녹음 데이터 저장하기 위한 변수

        navigator.mediaDevices.getUserMedia(constraints)
        .then(stream => {
            const mediaRecorder = new MediaRecorder(stream);

            // 녹음 버튼 클릭했을 때
            record.onclick = () => {
                mediaRecorder.start(); //녹음 시작
                record.style.background = "red";
                record.style.color = "black";
            };


            // 정지 버튼 눌렀을 때
            stop.onclick = () => {
                mediaRecorder.stop(); // 녹음 정지
                record.style.background = "";
                record.style.color = "";
            };

            mediaRecorder.onstop = e => {
                // (1) <audio> 태그 담을 컨테이너 객체 생성
                const clipcontainer = document.createElement('article');                    

                // (2) audio 객체 생성 및 속성 설정
                const audio = document.createElement('audio');    
                audio.setAttribute('controls', '');

                // (3) 컨테이너에 audio 연결
                clipcontainer.appendChild(audio);

                // <div>에  <audio> 태그 출력
                // 이전에 녹음할 때 추가한 childNode가 존재한다면 제거하고
                //if(soundClips.hasChildNodes())
                //    soundClips.removeChild(soundClips.childNodes[0]);
                //추가
                soundClips.appendChild(clipcontainer);

                // chunks에 저장된 녹음 데이터를  audio 양식으로 설정
                const blob = new Blob(chunks, {
                    'type': 'audio/wav codecs=opus'
                });

                // chunks 초기화 (초기화 하지 않으면 녹음 내용이 누적 저장됨)
                chunks = [];

                // audio 소스 지정
                const audioURL = URL.createObjectURL(blob);
                audio.src = audioURL;


                // (4) 녹음 내용을 파일로 저장
                // 파일명
                const clipName = "voiceRecord"
                const a = document.createElement('a');
                clipcontainer.appendChild(a);
                a.href = audio.src;

                a.download = clipName;
                a.click();
                };


                // 녹음 시작 상태가 되면 chunks에   녹음 데이터 저장
                mediaRecorder.ondataavailable = e => {
                    chunks.push(e.data);
                };

        })
        .catch(err => {
            console.log("오류 발생 : " + err)
        })
    }
});
</script>