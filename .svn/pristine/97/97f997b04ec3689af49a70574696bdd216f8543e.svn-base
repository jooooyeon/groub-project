<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
<style>
@import 'https://fonts.googleapis.com/icon?family=Material+Icons|Roboto';

.recorder_wrapper {
    width: 100%;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flex;
    display: -o-flex;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
}

.recorder {
    display: inline-block;
    text-align: center;
    width: 500px;
    max-width: 100%;
}

.record_btn {
    width: 100px;
    height: 100px;
    font-family: 'Material Icons';
    font-size: 48px;
    color: #e74c3c;
    background: none;
    border: 2px solid #e74c3c;
    border-radius: 50%;
    cursor: pointer;
    transition: 0.15s linear;
}

.record_btn:hover {
    transition: 0.15s linear;
    transform: scale( 1.05 );
}

.record_btn:active {
    background: #f5f5f5;
}

.record_btn:after {
    content: '\E029';
}

.record_btn[disabled] {
    border: 2px solid #ccc;
}

.record_btn[disabled]:after {
    content: '\E02B';
    color: #ccc;
}

.record_btn[disabled]:hover {
    transition: 0.15s linear;
    transform: none;
}

.record_btn[disabled]:active {
    background: none;
}

.recording {
    animation: recording 2s infinite ease-in-out;
    position: relative;
}

.recording:before {
    content: '';
    display: inline-block;
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0px;
    height: 0px;
    margin: 0px;
    border-radius: 50%;
    background: rgba( 0, 0, 0, 0.05 );
    animation: recording_before 2s infinite ease-in-out;
}

@keyframes recording {
    from {
        transform: scale( 1.1 );
    }

    50% {
        transform: none;
    }

    to {
        transform: scale( 1.1 );
    }
}

@keyframes recording_before {
    80% {
        width: 200px;
        height: 200px;
        margin: -100px;
        opacity: 0;
    }

    to {
        opacity: 0;
    }
}

.record_canvas {
    width: 60px;
    height: 100px;
    display: inline-block;

}

.txt_btn {
    color: #000;
    text-decoration: none;
    transition: 0.15s linear;
    animation: text_btn 0.3s ease-in-out;
}
</style>

<div class="card mb-2">
	<div class="card-body">
		<h5 class="card-title">내정보</h5>
		<input id="mem_id" type="hidden" value="<sec:authentication property="principal.username"/>"/>
		<sec:authorize access="isAuthenticated()">
			<sec:authentication property="principal.userVO.userId" var="loginId" />
			<sec:authentication property="principal.userVO.userNm" var="loginName" />
		</sec:authorize>

		<ul class="nav nav-tabs" id="myTab" role="tablist">
			<li class="nav-item"><a class="nav-link active" id="my-tab" data-bs-toggle="tab" href="#tab-my" role="tab" aria-controls="tab-my" aria-selected="true">내정보</a></li>
			<li class="nav-item"><a class="nav-link" id="ai-tab" data-bs-toggle="tab" href="#tab-ai" role="tab" aria-controls="tab-ai" aria-selected="false">AI기능</a></li>
		</ul>
		<div class="tab-content border border-top-0 p-3" id="myTabContent">
			<!-- 내정보 div -->
			<div class="tab-pane fade show active" id="tab-my" role="tabpanel" aria-labelledby="my-tab">
				나는 내정보가 나올 곳!!
			</div>
			<!-- 내정보 div 끝 -->
			<!-- ai div -->
			<div class="tab-pane fade" id="tab-ai" role="tabpanel" aria-labelledby="ai-tab">
	<!--    			<p>AI 기능을 이용하기 위하여 얼굴/음성을 등록해 주세요</p> -->
				<ul class="nav nav-tabs" id="myTab" role="tablist">
					<li class="nav-item"><a class="nav-link active" id="my-face" data-bs-toggle="tab" href="#tab-face" role="tab" aria-controls="tab-face" aria-selected="true">얼굴인식 등록</a></li>
					<li class="nav-item"><a class="nav-link" id="voice-tab" data-bs-toggle="tab" href="#tab-voice" role="tab" aria-controls="tab-voice" aria-selected="false">음성인식 등록</a></li>
				</ul>

				<!-- 얼굴인식 div -->
				<div class="tab-pane fade show active" id="tab-face" role="tabpanel" aria-labelledby="my-face">

		            <div class="mb-3">
		              <label id="faceLabel" class="col-form-label" for="message-text">얼굴인식</label>
		              <video class="form-control" id="video" width="640" height="480" autoplay></video>
		            </div>


		          	  <c:choose>
				          <c:when test="${userVO.faceYn == 'N'}">
					          <button class="btn btn-primary me-1 mb-1" id="captureBtn" >얼굴인식 다시등록</button>
				          </c:when>
				          <c:when test="${userVO.faceYn == 'Y'}">
					          <button class="btn btn-primary me-1 mb-1" id="captureBtn" >얼굴인식 다시등록</button>
				          </c:when>
				          <c:otherwise>
			          		  <button class="btn btn-primary me-1 mb-1" id="captureBtn" >얼굴인식 등록하기</button>
				          </c:otherwise>
			          </c:choose>

		          	  <c:choose>
				          <c:when test="${userVO.faceYn == 'N'}">
					          <button id="btnOpen" onclick="changeFaceY('${userVO.userId}')" class="btn btn-success me-1 mb-1">얼굴인식 활성화
					          </button>
				          </c:when>
				          <c:when test="${userVO.faceYn == 'Y'}">
					          <button id="btnClose" onclick="changeFaceN('${userVO.userId}')" class="btn btn-danger me-1 mb-1">얼굴인식 비활성화
					          </button>
				          </c:when>
				          <c:otherwise>
				          </c:otherwise>
			          </c:choose>
				</div>
				<!-- 얼굴인식 div 끝 -->








				<!-- 음성인식 div -->
				<div class="tab-pane fade" id="tab-voice" role="tabpanel" aria-labelledby="voice-tab">
					<p>음성인식 기능을 사용하기 위해서 녹음을 해주세요</p>
					<div class="recorder_wrapper">
				        <div class="recorder">
				            <button class="record_btn" id="button"></button>
				            <p id="msg_box"></p>
				        </div>
					</div>
					<p>최소 3개 이상의 녹음한 음성을 첨부하여 전송해 주세요</p>

					<div class="mb-3">
					  <input class="form-control" id="formFileMultiple" type="file" multiple="multiple" />
					</div>
					<div>
						<button id="submit">전송</button>
					</div>

				</div>
				<!-- 음성인식 div 끝 -->
			</div>
			<!-- ai div 끝 -->
		</div>
	</div>
</div>

<!-- 얼굴인식 이미지 등록 작업 -->

<script type="text/javascript">
$(function() {
	var video = document.getElementById('video');
	var captureBtn = document.getElementById('captureBtn');
	var canvas = document.createElement('canvas');
	var context = canvas.getContext('2d');
	var formData = new FormData();

	navigator.mediaDevices.getUserMedia({ video: true }).then(function(stream) {
	video.srcObject = stream;
    video.play();
    })
    .catch(function(error) {
    	console.error(error);
	});

	captureBtn.addEventListener('click', function() {
		document.getElementById('faceLabel').innerText = "얼굴인식 및 데이터 만드는중..";
    	captureAndSend();
	});

	function captureAndSend() {
		return new Promise(function(resolve, reject) {
			var count = 0;
			function captureFrame() {
				canvas.width = video.videoWidth;
				canvas.height = video.videoHeight;
          		context.drawImage(video, 0, 0, canvas.width, canvas.height);
          		canvas.toBlob(function(blob) {
					formData.append('file[]', blob, count + '.jpg');
          	  		count++;
	          	  	if (count < 100) {
	          		  	setTimeout(captureFrame, 10);
	          	  	} else {
	            	  	formData.append('mem_id', document.getElementById('mem_id').value);
	            	  	$.ajax({
					  		url: "http://localhost:5000/capture.ajax",
					  		processData: false,
					  		contentType: false,
					  		data: formData,
					  		type: "POST",
					  		success: function(response) {
					  			console.log(response);
					  			document.getElementById('faceLabel').innerText = "서버에 저장중..";
					  			var data = {
					  				    memId : document.getElementById('mem_id').value
					  				};

					  			$.ajax({
					  			    url: "http://localhost/ddit/sign/signup",
					  			    data: JSON.stringify(data),
					  			    type: "POST",
					  			    contentType: 'application/json; charset=utf-8',
					  			    success: function(response) {
					  			        console.log(response);
					  			        document.getElementById('faceLabel').innerText = "완료!";
					  			        alert("인식정보 등록 성공!");
					  			        window.location.href = "/mypage";
					  			    },
					  			    error: function(xhr, status, error) {
					  			        console.error(xhr, status, error);
					  			    }
					  			});//ajax끝
					  		},
					  		error: function(xhr, status, error) {
					      		console.error(xhr, status, error);
							}
	                	});//ajax 끝
	                	resolve();
            		}//if끝
        		}, 'image/jpeg', 0.9);
   			}
   			captureFrame();
		});
  	}
});


function changeFaceY(userId) {
    if (!confirm(userId + " 얼굴인식 로그인을 활성화하시겠습니까?")) {
        alert("취소하였습니다.");
    } else {

	    var sendData = {"userId":userId}
		var csrfToken = $("input[name='_csrf']").val();

	    $.ajax({
	        url : '/mypage/faceAct',
	        data : sendData,
	        method : 'post',
			headers: {
	            'Content-Type': 'application/x-www-form-urlencoded',
	            'X-CSRF-TOKEN': csrfToken
	        },
	        success : function(resp){
	        	  // 버튼 변경
	        	  var openBtn = document.getElementById("btnOpen");
	        	  var closeBtn = document.createElement("button");
	        	  closeBtn.id = "btnClose";
	        	  closeBtn.onclick = function() {
	        	    changeFaceN('${userVO.userId}');
	        	  };
	        	  closeBtn.className = "btn btn-danger me-1 mb-1";
	        	  closeBtn.innerText = "얼굴인식 비활성화";

	        	  openBtn.parentNode.replaceChild(closeBtn, openBtn);
	        }
	    })
        alert("활성화 되었습니다.");
    }
}
function changeFaceN(userId) {
    if (!confirm(userId + " 얼굴인식 로그인을 비활성화하시겠습니까?")) {
        alert("취소하였습니다.");
    } else {

	    var sendData = {"userId":userId}
		var csrfToken = $("input[name='_csrf']").val();

	    $.ajax({
	        url : '/mypage/faceAct',
	        data : sendData,
	        method : 'post',
			headers: {
	            'Content-Type': 'application/x-www-form-urlencoded',
	            'X-CSRF-TOKEN': csrfToken
	        },
	        success : function(resp){
	        	  // 버튼 변경
	        	  var closeBtn = document.getElementById("btnClose");
	        	  var openBtn = document.createElement("button");
	        	  openBtn.id = "btnOpen";
	        	  openBtn.onclick = function() {
	        	    changeFaceY('${userVO.userId}');
	        	  };
	        	  openBtn.className = "btn btn-success me-1 mb-1";
	        	  openBtn.innerText = "얼굴인식 활성화";

	        	  closeBtn.parentNode.replaceChild(openBtn, closeBtn);
	        }
	    })
        alert("비활성화 되었습니다.");
    }
}



</script>



<script type="text/javascript">

var msg_box = document.getElementById( 'msg_box' ),
button = document.getElementById( 'button' ),
canvas = document.getElementById( 'canvas' ),
lang = {
	'mic_error': 'Error accessing the microphone',
	'press_to_start': '버튼을 누르고 [로그인]이라고 말씀해 주세요',
	'recording': 'Recording',
	'play': 'Play',
	'stop': 'Stop',
	'download': 'Download',
	'use_https': 'This application in not working over insecure connection. Try to use HTTPS'
},
time;


msg_box.innerHTML = lang.press_to_start;

if ( navigator.mediaDevices === undefined ) {
	navigator.mediaDevices = {};
}


if ( navigator.mediaDevices.getUserMedia === undefined ) {
	navigator.mediaDevices.getUserMedia = function ( constrains ) {
	    var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia
	    if ( !getUserMedia )  {
	        return Promise.reject( new Error( 'getUserMedia is not implemented in this browser' ) );
	    }

	    return new Promise( function( resolve, reject ) {
	        getUserMedia.call( navigator, constrains, resolve, reject );
	    } );
	}
}


if ( navigator.mediaDevices.getUserMedia ) {
	var btn_status = 'inactive',
	    mediaRecorder,
	    chunks = [],
	    audio = new Audio(),
	    mediaStream,
	    audioSrc,
	    type = {
	        'type': 'audio/wav,codecs=opus'
	    },
	    ctx,
	    analys,
	    blob;

	button.onclick = function () {
	    if ( btn_status == 'inactive' ) {
	        start();
	    } else if ( btn_status == 'recording' ) {
	        stop();
	    }
	}

	function parseTime( sec ) {
	    var h = parseInt( sec / 3600 );
	    var m = parseInt( sec / 60 );
	    var sec = sec - ( h * 3600 + m * 60 );

	    h = h == 0 ? '' : h + ':';
	    sec = sec < 10 ? '0' + sec : sec;

	    return h + m + ':' + sec;
	}


	function start() {
	    navigator.mediaDevices.getUserMedia( { 'audio': true } ).then( function ( stream ) {
	        mediaRecorder = new MediaRecorder( stream );
	        mediaRecorder.start();

	        button.classList.add( 'recording' );
	        btn_status = 'recording';

	        msg_box.innerHTML = lang.recording;

	        if ( navigator.vibrate ) navigator.vibrate( 150 );

	        time = Math.ceil( new Date().getTime() / 1000 );


	        mediaRecorder.ondataavailable = function ( event ) {
	            chunks.push( event.data );
	        }

	        mediaRecorder.onstop = function () {
	            stream.getTracks().forEach( function( track ) { track.stop() } );

	            blob = new Blob( chunks, type );
	            audioSrc = window.URL.createObjectURL( blob );

	            audio.src = audioSrc;

	            chunks = [];
	        }



	    } ).catch( function ( error ) {
	        if ( location.protocol != 'https:' ) {
	          msg_box.innerHTML = lang.mic_error + '<br>'  + lang.use_https;
	        } else {
	          msg_box.innerHTML = lang.mic_error;
	        }
	        button.disabled = true;
	    });
	}

	function stop() {
	    mediaRecorder.stop();
	    button.classList.remove( 'recording' );
	    btn_status = 'inactive';

	    if ( navigator.vibrate ) navigator.vibrate( [ 200, 100, 200 ] );

	    var now = Math.ceil( new Date().getTime() / 1000 );

	    var t = parseTime( now - time );

	    msg_box.innerHTML = '<a href="#" onclick="play(); return false;" class="txt_btn">' + lang.play + ' (' + t + 's)</a><br>' +
	                        '<a href="#" onclick="save(); return false;" class="txt_btn">' + lang.download + '</a>'


	}



	function play() {
	    audio.play();
	    msg_box.innerHTML = '<a href="#" onclick="pause(); return false;" class="txt_btn">' + lang.stop + '</a><br>' +
	                        '<a href="#" onclick="save(); return false;" class="txt_btn">' + lang.download + '</a>';
	}

	function pause() {
	    audio.pause();
	    audio.currentTime = 0;
	    msg_box.innerHTML = '<a href="#" onclick="play(); return false;" class="txt_btn">' + lang.play + '</a><br>' +
	                        '<a href="#" onclick="save(); return false;" class="txt_btn">' + lang.download + '</a>'
	}

	function roundedRect(ctx, x, y, width, height, radius, fill) {
	    ctx.beginPath();
	    ctx.moveTo(x, y + radius);
	    ctx.lineTo(x, y + height - radius);
	    ctx.quadraticCurveTo(x, y + height, x + radius, y + height);
	    ctx.lineTo(x + width - radius, y + height);
	    ctx.quadraticCurveTo(x + width, y + height, x + width, y + height - radius);
	    ctx.lineTo(x + width, y + radius);
	    ctx.quadraticCurveTo(x + width, y, x + width - radius, y);
	    ctx.lineTo(x + radius, y);
	    ctx.quadraticCurveTo(x, y, x, y + radius);

	    ctx.fillStyle = fill;
	    ctx.fill();
	}

	function save() {
	    var a = document.createElement( 'a' );
	    a.download = 'record.wav';
	    a.href = audioSrc;
	    document.body.appendChild( a );
	    a.click();

	    document.body.removeChild( a );
	}

} else {
	if ( location.protocol != 'https:' ) {
	  msg_box.innerHTML = lang.mic_error + '<br>'  + lang.use_https;
	} else {
	  msg_box.innerHTML = lang.mic_error;
	}
	button.disabled = true;
}





//파이썬으로 보내기
$("#submit").click(function(){
	 var files = document.getElementById('formFileMultiple').files;
	  if (files.length === 0) {
	    alert('파일을 선택해주세요.');
	    return;
	  }

	  var formData = new FormData();

	  for (var i = 0; i < files.length; i++) {
	    formData.append('file['+i+']', files[i]);
	  }

	  for(let key of formData.keys())
	    console.log(key, formData.get(key));


})

</script>