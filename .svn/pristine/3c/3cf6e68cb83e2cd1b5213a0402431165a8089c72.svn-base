package kr.or.ddit.websocket.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.collections.map.HashedMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessageSendingOperations;
import org.springframework.stereotype.Controller;

import kr.or.ddit.chat.service.ChatServiceImpl;
import kr.or.ddit.chat.vo.ChatMsgVO;
import kr.or.ddit.chat.vo.ChatUserVO;
import kr.or.ddit.msg.service.MsgServiceImpl;
import kr.or.ddit.msg.vo.MsgVO;
import kr.or.ddit.websocket.handler.WebsocketHandler;
import kr.or.ddit.websocket.vo.AlarmVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * @author 김종명
 *
 */
@Slf4j
@Controller
@RequiredArgsConstructor
public class AlarmController {

	@Autowired
	private SimpMessageSendingOperations simpMessageSendingOperations;

	@Autowired
	private WebsocketHandler websocketHandler;
	
	@Autowired
	private ChatServiceImpl chatServiceImpl;
	
	@Autowired
	private MsgServiceImpl msgServiceImpl;
	
	/**
	 * 쪽지 알람
	 * @param a
	 * @throws InterruptedException
	 */
	@MessageMapping("/msg")
	public void AlarmMsg(AlarmVO a) throws InterruptedException {
		log.info("쪽지 알람>> "+a);
		alarm(a, "쪽지");
	}

	/**
	 * 메일 알람
	 * @param AlarmVO a
	 * @throws InterruptedException
	 */
	@MessageMapping("/mail")
	public void AlarmMail(AlarmVO a) throws InterruptedException {
		log.info("메일 알람>> "+a);
		alarm(a, "메일");
	}

	/**
	 * 메신저 알람
	 * @param AlarmVO a
	 * @throws InterruptedException
	 */
	@MessageMapping("/chat")
	public void AlarmMessenger(AlarmVO a) throws InterruptedException {
		log.info("메신저 알람>> "+a);
		alarm(a, "매신저");
	}

	/**
	 * WebSocketHandler 처리한 userData를 footer에 보냄
	 */
	@MessageMapping("/userData")
	public void userData() {
		simpMessageSendingOperations.convertAndSend("/sub/userData", this.websocketHandler.getUser());
	}
	
	/**
	 * 채팅방 대화내역 DB 저장과 불러오기
	 * @param ChatMsgVO msg
	 * @throws InterruptedException 
	 */
	@MessageMapping("/chatRoom")
	public void chatRoom(ChatMsgVO msg) throws InterruptedException {
		if(msg.getUserId()!=null) this.chatServiceImpl.msgInsert(msg);
		List<ChatMsgVO> msgList = this.chatServiceImpl.msgList(msg);
		
		this.simpMessageSendingOperations.convertAndSend("/sub/chatRoom/"+msg.getChatRmNo(),msgList);
		
		String userId = msg.getUserId();
		if(userId==null&&userId.equals(""))return;
		ChatUserVO ul = new ChatUserVO();
		ul.setChatRmNo(msg.getChatRmNo());
		List<ChatUserVO> ulList = this.chatServiceImpl.userList(ul);
		List<ChatUserVO> temp = new ArrayList<ChatUserVO>();
		
		ChatUserVO me = new ChatUserVO();
		for(ChatUserVO ulVO:ulList) {
			if(ulVO.getUserId().equals(userId)) {
				me.setDeptNm(ulVO.getDeptNm());
				me.setCstCdNm(ulVO.getCstCdNm());
				me.setUserNm(ulVO.getUserNm());
			}else {
				temp.add(ulVO);
			}
		}
		
		for(ChatUserVO ulVO:temp) {
			String mess = String.format("%s %s %s님에게 메신저 왔어요", me.getDeptNm(), me.getCstCdNm(), me.getUserNm());
			this.simpMessageSendingOperations.convertAndSend("/sub/alarm/"+ulVO.getUserId(),mess);
		}
	}
	
	/**
	 * 알람을 보내기 위한 공통 메서드
	 * @param AlaramVO a
	 * @param String s
	 * @throws InterruptedException
	 */
	private void alarm(AlarmVO a, String s) throws InterruptedException {
		Thread.sleep(1000);
		
		MsgVO m = new MsgVO();
		String mess = "";
		
		if (a == null) return;
		
		if(!(s.equals(""))&&s!=null) {
			mess = String.format("%s님에게 " + s + " 왔어요", a.getSenderNm());
			m.setMemoCn(mess);
			m.setMemoTtl(s);
			m.setStatCd("MM006");
			m.setSender(a.getSender());
			m.setUserId(a.getUserId());
			log.info("알람 저장>> "+m);
			
			this.msgServiceImpl.insert(m);
		}
		List<MsgVO> mList = this.msgServiceImpl.listAlarm(m);
		List<MsgVO> mTemp = new ArrayList<MsgVO>();
		
		for(MsgVO mVO:mList) if(mVO.getStatCd().equals("MM006")||mVO.getStatCd().equals("MM007")) mTemp.add(mVO);
		
		Map<String,Object> map = new ConcurrentHashMap<String, Object>();
		map.put("msg", mess);
		map.put("alarm", mTemp);
		
		simpMessageSendingOperations.convertAndSend(String.format("/sub/alarm/%s", a.getUserId()), map);
		
	}
}
