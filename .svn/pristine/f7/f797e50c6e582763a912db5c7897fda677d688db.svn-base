package kr.or.ddit.msg;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.msg.mapper.MsgMapper;
import kr.or.ddit.msg.vo.MsgVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class MsgServiceImpl implements MsgService {
	
	@Autowired
	private MsgMapper msgMapper;

	//쪽지를 보낼 때 처리하는 작업
	@Transactional
	@Override
	public int insert(MsgVO msg) {
		int result = 0;
		msg.setStatCd("MM001"); //메일 보내면은 기본적으로 미열람 상태
		result += this.msgMapper.insertSender(msg);
		result += this.msgMapper.insertReceiver(msg);
		
		return result;
	}

	//중요 쪽지로 선택
	@Override
	public int importMsg(MsgVO msg) {
		if(msg.getStatCd().equals("MM001")||msg.getStatCd().equals("MM002")) msg.setStatCd("MM005");
		else if(msg.getStatCd().equals("MM005")) msg.setStatCd("MM002");
		return this.msgMapper.updateReceiver(msg);
	}

	//쪽지 보낸 시간 포멧&보낸 쪽지함에서 삭제/휴지통 내용 없애기
	@Override
	public List<MsgVO> listReceiver(MsgVO msg) {
		List<MsgVO> listTemp = this.msgMapper.listReceiver(msg);
		List<MsgVO> list = new ArrayList<MsgVO>();
		for(int i=0;i<listTemp.size();i++) {
			msg = listTemp.get(i);
			DsptchDtFormat(msg);
			if(msg.getStatCd().equals("MM004")||msg.getStatCd().equals("MM003")) {
			}else {
				list.add(listTemp.get(i));
			}
		}
		return list;
	}
	
	//보낸 쪽지 리스트
	@Override
	public List<MsgVO> listSender(MsgVO msg) {
		List<MsgVO> listTemp = this.msgMapper.listSender(msg);
		List<MsgVO> list = new ArrayList<MsgVO>();
		for(int i=0;i<listTemp.size();i++) {
			msg = listTemp.get(i);
			DsptchDtFormat(msg);
			if(msg.getStatCd().equals("MM003")||msg.getStatCd().equals("MM004")) {
			}else {
				list.add(msg);
			}
		}
		return list;
	}

	//쪽지 보낸 시간 포멧
	@Transactional
	@Override
	public MsgVO detailReceiver(MsgVO msg) {
		//글을 읽을 때만 변경되게 설정
		if(msg.getStatCd().equals("MM001")) {
			msg.setStatCd("MM002");
			int result = this.msgMapper.updateReceiver(msg);
			result += this.msgMapper.updateSender(msg);
		}
		msg = this.msgMapper.detailReceiver(msg);
		DsptchDtFormat(msg);
		
		return msg;
	}

	//보낸 쪽지 상세보기
	@Override
	public MsgVO detailSender(MsgVO msg) {
		msg = this.msgMapper.detailReceiver(msg);
		DsptchDtFormat(msg);
		return msg;
	}
	
	//중요 쪽지받아오기
	@Override
	public List<MsgVO> msgImport(MsgVO msg) {
		return this.msgMapper.listReceiver(msg);
	}
	
	//휴지통 보내기
	@Override
	public int trashSet(MsgVO msg) {
		msg.setStatCd("MM003");
		log.info("msg>> "+msg);
		return this.msgMapper.updateReceiver(msg);
	}
	
	//삭제하기
	@Override
	public int delete(MsgVO msg) {
		msg.setStatCd("MM004");
		return this.msgMapper.updateReceiver(msg);
	}

	//휴지통에서 보관함으로 복원하기
	@Override
	public int restore(MsgVO msg) {
		msg.setStatCd("MM002");
		log.info("msg>> "+msg);
		return this.msgMapper.updateReceiver(msg);
	}
	
	@Override
	public List<MsgVO> trash(MsgVO msg) {
		msg.setStatCd("MM003");
		List<MsgVO> list= this.msgMapper.listReceiver(msg);
		for(int i=0;i<list.size();i++) {
			msg = list.get(i);
			DsptchDtFormat(msg);
		}
		return list;
	}
	
	//받아온 날짜 format
	private void DsptchDtFormat(MsgVO msg) {
		String date = msg.getDsptchDt();
		date = date.substring(0,16);
		msg.setDsptchDt(date);
	}

}
